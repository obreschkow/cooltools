// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/cooltools.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// paircountxx
List paircountxx(NumericMatrix x, double dr, double rmax);
static SEXP _cooltools_paircountxx_try(SEXP xSEXP, SEXP drSEXP, SEXP rmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type dr(drSEXP);
    Rcpp::traits::input_parameter< double >::type rmax(rmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(paircountxx(x, dr, rmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cooltools_paircountxx(SEXP xSEXP, SEXP drSEXP, SEXP rmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cooltools_paircountxx_try(xSEXP, drSEXP, rmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// paircountxy
List paircountxy(NumericMatrix x, NumericMatrix y, double dr, double rmax);
static SEXP _cooltools_paircountxy_try(SEXP xSEXP, SEXP ySEXP, SEXP drSEXP, SEXP rmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type dr(drSEXP);
    Rcpp::traits::input_parameter< double >::type rmax(rmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(paircountxy(x, y, dr, rmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cooltools_paircountxy(SEXP xSEXP, SEXP ySEXP, SEXP drSEXP, SEXP rmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cooltools_paircountxy_try(xSEXP, ySEXP, drSEXP, rmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// paircountxx1d
List paircountxx1d(NumericVector x, double dr, double rmax);
static SEXP _cooltools_paircountxx1d_try(SEXP xSEXP, SEXP drSEXP, SEXP rmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type dr(drSEXP);
    Rcpp::traits::input_parameter< double >::type rmax(rmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(paircountxx1d(x, dr, rmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cooltools_paircountxx1d(SEXP xSEXP, SEXP drSEXP, SEXP rmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cooltools_paircountxx1d_try(xSEXP, drSEXP, rmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// paircountxy1d
List paircountxy1d(NumericVector x, NumericVector y, double dr, double rmax);
static SEXP _cooltools_paircountxy1d_try(SEXP xSEXP, SEXP ySEXP, SEXP drSEXP, SEXP rmaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type dr(drSEXP);
    Rcpp::traits::input_parameter< double >::type rmax(rmaxSEXP);
    rcpp_result_gen = Rcpp::wrap(paircountxy1d(x, y, dr, rmax));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _cooltools_paircountxy1d(SEXP xSEXP, SEXP ySEXP, SEXP drSEXP, SEXP rmaxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_cooltools_paircountxy1d_try(xSEXP, ySEXP, drSEXP, rmaxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error("%s", CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// kde2stampxx
NumericMatrix kde2stampxx(NumericMatrix map, NumericMatrix counts, int hmax, double s, double sdmin, double sdmax, double d, int nkernels, NumericVector kern, NumericVector kernindex, NumericVector kernlength);
RcppExport SEXP _cooltools_kde2stampxx(SEXP mapSEXP, SEXP countsSEXP, SEXP hmaxSEXP, SEXP sSEXP, SEXP sdminSEXP, SEXP sdmaxSEXP, SEXP dSEXP, SEXP nkernelsSEXP, SEXP kernSEXP, SEXP kernindexSEXP, SEXP kernlengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type map(mapSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< int >::type hmax(hmaxSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type sdmin(sdminSEXP);
    Rcpp::traits::input_parameter< double >::type sdmax(sdmaxSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type nkernels(nkernelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kern(kernSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kernindex(kernindexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kernlength(kernlengthSEXP);
    rcpp_result_gen = Rcpp::wrap(kde2stampxx(map, counts, hmax, s, sdmin, sdmax, d, nkernels, kern, kernindex, kernlength));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _cooltools_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*paircountxx)(NumericMatrix,double,double)");
        signatures.insert("List(*paircountxy)(NumericMatrix,NumericMatrix,double,double)");
        signatures.insert("List(*paircountxx1d)(NumericVector,double,double)");
        signatures.insert("List(*paircountxy1d)(NumericVector,NumericVector,double,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _cooltools_RcppExport_registerCCallable() { 
    R_RegisterCCallable("cooltools", "_cooltools_paircountxx", (DL_FUNC)_cooltools_paircountxx_try);
    R_RegisterCCallable("cooltools", "_cooltools_paircountxy", (DL_FUNC)_cooltools_paircountxy_try);
    R_RegisterCCallable("cooltools", "_cooltools_paircountxx1d", (DL_FUNC)_cooltools_paircountxx1d_try);
    R_RegisterCCallable("cooltools", "_cooltools_paircountxy1d", (DL_FUNC)_cooltools_paircountxy1d_try);
    R_RegisterCCallable("cooltools", "_cooltools_RcppExport_validate", (DL_FUNC)_cooltools_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_cooltools_paircountxx", (DL_FUNC) &_cooltools_paircountxx, 3},
    {"_cooltools_paircountxy", (DL_FUNC) &_cooltools_paircountxy, 4},
    {"_cooltools_paircountxx1d", (DL_FUNC) &_cooltools_paircountxx1d, 3},
    {"_cooltools_paircountxy1d", (DL_FUNC) &_cooltools_paircountxy1d, 4},
    {"_cooltools_kde2stampxx", (DL_FUNC) &_cooltools_kde2stampxx, 11},
    {"_cooltools_RcppExport_registerCCallable", (DL_FUNC) &_cooltools_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_cooltools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
